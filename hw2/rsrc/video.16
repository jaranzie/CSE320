.	=	150000
;.incld	defs.16

; Bitmap Video Display Routines
;

LSIZE	=	10. * 32.
MAXB	=	VMEM + (24. * LSIZE)
VMEM	=	130000
VSIZE	=	20000

SCRREG	=	177770
INTLAC	=	1000
INVERT	=	400

;
; initialize the video display
;

vinit:	mov	INVERT, r0
	mov	r0, @SCRREG
	mov	r0, @vidflg
	jsr	r5, call
	vclrsc			; clear screen
	clr	r0
	mov	r0, @scroll
	mov	r0, @coffs
	mov	r0, @ocoffs
	mov	r0, @cchgd
	mov	r0, @cnoclr
	mov	MAXB, r0
	mov	r0, @cbase
	mov	r0, @ocbase
	mov	CSLOC, r0
	mov	r0, @csloc
	b	ret

;
; put a character on the screen, handling
;	cursor positioning and special chars.
;

vputc:	mov	@cbase, r2
	mov	@coffs, r1
	cmp	15, r0
	bneq	vpc.1
	clr	r0
	mov	r0, @coffs
	and	177740, r2
	mov	r2, @cbase
	b	vscchg		; display new cursor
vpc.1:	cmp	12, r0
	beq	vcdn
	sub	32., r0
	blt	ret
	jsr	r5, call
	vccrs
	b	vcrt

;
; move the cursor to x (in r2), y (in r1)
;

vcmov:	jsr	r5, call
	vparm
	mov	r2, @cbase
	mov	r1, @coffs
	b	vscchg

;
; display the cursor
;

vcdisp:	clr	r3
	mov	1, r1
	mov	r1, @cflg
	mov	@ocoffs, r1
	mov	@ocbase, r2
	b	vchbo
vccrs:	mov	@cchgd, r1
	tst	r1
	bnze	vcc.1
	com	r1
	mov	r1, @cnoclr
vcc.1:	mov	r0, r3
	mov	@coffs, r1
	mov	@cbase, r2
	b	vchbo

;
; Move the cursor up, down, left, and right
;

vcup:	mov	@cbase,  r0
	mov	r0, r1
	add	LSIZE, r1
	cmp	VMEM+VSIZE, r1
	bllt	vcu.1
	sub	VSIZE, r1
vcu.1:	mov	r1, @cbase
	jsr	r5, vlbase
	cmp	MAXB, r0		; top logical line?
	bllt	vscchg			; no, no scrolling needed
	jsr	r5, call
	vclrlc
	mov	@scroll, r1		; perform up scrolling
	add	10., r1
	and	377, r1
	mov	r1, @scroll
	xor	@vidflg, r1
	mov	r1, @SCRREG
	b	vscchg

vcdn:	mov	@cbase, r0
	mov	r0, r1
	sub	LSIZE, r1
	cmp	VMEM, r1
	blge	vcd.1
	add	VSIZE, r1
vcd.1:	mov	r1, @cbase
	jsr	r5, vlbase
	cmp	VMEM+LSIZE, r0		; bottom logical line?
	blge	vscchg			; no, no scrolling needed
	jsr	r5, call
	vclrlc
	mov	@scroll, r1		; perform down scrolling
	sub	10., r1
	and	377, r1
	mov	r1, @scroll
	xor	@vidflg, r1
	mov	r1, @SCRREG
	b	vscchg

vlbase:	mov	@scroll, r1
	sll	2, r1
	sll	2,  r1
	sll	1, r1
	sub	r1, r0
	cmp	VMEM, r0
	blge	vlb.1
	add	VSIZE, r0
vlb.1:	jmp	r5

vcrt:	mov	@cbase, r0
	mov	@coffs, r1
	mov	r0, r2
	and	37, r2
	cmp	37, r2
	blt	vcr.1
	cmp	2, r1
	bgt	ret
vcr.1:	add	7, r1
	cmp	16., r1
	blt	vcr.2
	sub	16., r1
	inc	r0
vcr.2:	mov	r0, @cbase
	mov	r1, @coffs
	b	vscchg

vclf:	mov	@coffs, r0
	sub	7, r1
	bge	vcl.1
	add	16., r0
	mov	@cbase, r1
	mov	r1, r2
	and	37, r2
	bze	ret
	dec	r1
	mov	r1, @cbase
vcl.1:	mov	r0, @coffs

vscchg:	mov	1, r0
	mov	r0, @cchgd
	b	ret

;
; redisplay cursor, if necessary
;

vcrdsp:	mov	@cchgd, r0
	tst	r0
	bze	ret
	clr	r0
	mov	r0, @cchgd
	mov	@cnoclr, r0
	tst	r0
	bze	vcrd.1
	clr	r0
	mov	r0, @cnoclr
	b	vcrd.2
vcrd.1:	jsr	r5, call
	vcdisp
vcrd.2:	mov	cbase, r4
	mov	ocbase, r5
	mov	@r4+, r0
	mov	r0, @r5+
	mov	@r4+, r0
	mov	r0, @r5+
	b	vcdisp

;
; given x in r1, y in r2, compute address of
;	leftmost bottom word of character into
;	r2, and number of bits to shift into r1.
;

vparm:	sll	1, r1		; mult r1 by 10.
	mov	r1, @sp+
	sll	2, r1
	add	@-sp, r1
	sll	1, r1		; mult by 32.
	sll	2, r1
	sll	2, r1
	mov	r1, @sp+	; save for later
	mov	r2, @sp+	; mult r2 by 7
	sll	1, r2
	mov	r2, @sp+
	sll	1, r2
	add	@-sp, r2
	add	@-sp, r2
	clr	r1		; divide r2by16.
	sarc	2, r2		; put rem in r1
	rrc	2, r1
	sarc	2, r2
	rrc	2, r1
	swap	1, r1
	sar	2, r1
	sar	2, r1
	add	@-sp, r2	; add in rest of
	mov	@scroll, r3	; offset
	sll	2, r3
	sll	2, r3
	sll	1, r3
	add	r3, r2
	cmp	VSIZE, r2
	blt	vp.1
	sub	VSIZE, r2
vp.1:	add	VMEM, r2
	b	ret2

;
; put char in r0 on screen at positin r1, r2
;

vchxy:	mov	r0, r3		; save char code
	jsr	r5, call
	vparm
vchbo:	mov	r3, @sp+
	sll	2, r3
	add	@-sp, r3
	add	@csloc, r3
	mov	r1, @sp+	; save shift count
	mov	r1, r4
	mov	10., r5		; scan line count
;
; the following code has:
;	r0, r1: two word data to be shifted
;	r2: pointer into video mmory
;	r3: pointer into char table
;	r4: shift count
;	r5: scan line count
; IDEA: first clear out old stuff,
; then XOR in new data.  If cflg .ne.0, skip
; the clearing and just XOR.
;
vc.1:	mov	@cflg, r0
	tst	r0
	bnze	vc.7		
	mov	r4, r1
	sll	1, r1
	add	msktab, r1
	mov	@r1, r0
	inc	r1
	mov	@r1, r1
vc.3:	and	@r2, r0
	mov	r0, @r2
	inc	r2
	and	@r2, r1
	mov	r1, @r2
	dec	r2		; stuff cleared
vc.7:	mov	@r3, r0		; fetch scan line
	mov	r5, r1		; see if odd/even
	sarc	1, r1
	bnc	vc.4
	swap	1, r0		; use high half
	inc	r3		; increment pointer
vc.4:	and	177, r0
	clr	r1		; prepare to shift
	add	2, r4		; adjust shift count
vc.5:	sub	2, r4
	bze	vc.6
	bmi	vc.8
	sllc	2, r0
	rlc	2, r1
	b	vc.5
vc.8:	sarc	1, r1
	rrc	1, r0
vc.6:	xor	@r2, r0		; store new stuff
	mov	r0, @r2
	inc	r2
	xor	@r2, r1
	mov	r1, @r2
	mov	@-sp, r4
	mov	r4, @sp+
	add	37, r2		; new scan line
	cmp	VMEM+VSIZE, r2
	bllt	vc.9
	sub	VSIZE, r2
vc.9:	dec	r5
	bnze	vc.1		; more lines to do
	mov	@-sp, r0	; pop shift count
	clr	r0
	mov	r0, @cflg
	b	ret

;
; fast way to clear entire screen
;

vclrsc:	mov	VMEM, r4
	mov	177777, r0
vcs.1:	mov	r0, @r4+
	cmp	VMEM+VSIZE, r4
	bllt	vcs.1
	b	ret

;
; fast way to clear line containing cursor
;

vclrlc:	mov	@cbase, r4
	and	177740, r4
	mov	LSIZE, r1
	mov	177777, r0
vclc.1:	mov	r0, @r4+
	cmp	VMEM+VSIZE, r4
	bllt	vclc.2
	sub	VSIZE, r4
vclc.2:	dec	r1
	bnze	vclc.1
	b	ret

; global video data

scroll:	.word	0		; current scroll counter
cbase:	.word	0		; cursor base
coffs:	.word	0		; offset in bits
csloc:	.word	0		; loc of cs table
cflg:	.word	0		; clear or not?
ocbase:	.word	0		; old cursor base
ocoffs:	.word	0		; old cursor offset
cchgd:	.word	0		; has cursor position changed?
cnoclr:	.word	0		; need to clear old cursor
vidflg:	.word	0		; video status flags

msktab:	.word	177600, 177777, 177401, 177777
	.word	177003, 177777, 176007, 177777
	.word	174017, 177777, 170037, 177777
	.word	160077, 177777, 140177, 177777
	.word	100377, 177777, 000777, 177777
	.word	001777, 177776, 003777, 177774
	.word	007777, 177770, 017777, 177760
	.word	037777, 177740, 077777, 177700

CSLOC:
.byte	177,177,177,177,177,177,177,177,177,177	;
.byte	177,177,167,177,167,177,167,167,167,167	;!
.byte	177,177,177,177,177,177,153,177,153,153	;"
.byte	177,177,153,177,101,153,101,153,153,153	;#
.byte	177,177,167,177,127,141,175,143,167,103	;$
.byte	177,177,117,177,173,115,157,167,171,131	;%
.byte	177,177,123,177,125,155,165,173,173,165	;&
.byte	177,177,177,177,177,177,167,177,167,167	;'
.byte	177,177,167,177,175,173,175,175,167,173	;(
.byte	177,177,167,177,137,157,137,137,167,157	;)
.byte	177,177,167,177,143,125,143,167,167,125	;*
.byte	177,177,177,177,167,167,167,101,177,167	;+
.byte	177,177,173,177,167,167,177,177,177,177	; 
.byte	177,177,177,177,177,177,177,101,177,177	;-
.byte	177,177,167,177,177,177,177,177,177,177	;.
.byte	177,177,177,177,173,175,157,167,177,137	;/
.byte	177,177,143,177,131,135,115,125,143,135	;0
.byte	177,177,143,177,167,167,167,167,167,163	;1
.byte	177,177,101,177,173,175,137,147,143,135	;2
.byte	177,177,143,177,137,135,157,147,101,137	;3
.byte	177,177,157,177,101,157,153,155,157,147	;4
.byte	177,177,143,177,137,135,141,137,101,175	;5
.byte	177,177,143,177,135,135,175,141,107,173	;6
.byte	177,177,173,177,173,173,157,167,101,137	;7
.byte	177,177,143,177,135,135,135,143,143,135	;8
.byte	177,177,161,177,137,157,135,103,143,135	;9
.byte	177,177,177,177,167,177,167,177,177,177	;:
.byte	177,177,173,177,167,167,167,177,177,177	;;
.byte	177,177,157,177,173,167,173,175,157,167	;<
.byte	177,177,177,177,101,177,101,177,177,177	;=
.byte	177,177,173,177,157,167,157,137,173,167	;>
.byte	177,177,167,177,167,177,157,167,143,135	;?
.byte	177,177,103,177,145,175,125,105,143,135	;@
.byte	177,177,135,177,101,135,135,135,167,153	;A
.byte	177,177,141,177,135,135,135,141,141,135	;B
.byte	177,177,143,177,175,135,175,175,143,135	;C
.byte	177,177,141,177,135,135,135,135,141,135	;D
.byte	177,177,101,177,175,175,175,141,101,175	;E
.byte	177,177,175,177,175,175,175,141,101,175	;F
.byte	177,177,103,177,115,135,175,175,103,175	;G
.byte	177,177,135,177,135,135,135,101,135,135	;H
.byte	177,177,143,177,167,167,167,167,143,167	;I
.byte	177,177,143,177,137,135,137,137,137,137	;J
.byte	177,177,135,177,165,155,165,171,135,155	;K
.byte	177,177,101,177,175,175,175,175,175,175	;L
.byte	177,177,135,177,135,135,125,125,135,111	;M
.byte	177,177,135,177,115,135,131,125,135,135	;N
.byte	177,177,143,177,135,135,135,135,143,135	;O
.byte	177,177,175,177,175,175,135,141,141,135	;P
.byte	177,177,123,177,125,155,135,135,143,135	;Q
.byte	177,177,135,177,165,155,135,141,141,135	;R
.byte	177,177,143,177,137,135,175,143,143,135	;S
.byte	177,177,167,177,167,167,167,167,101,167	;T
.byte	177,177,143,177,135,135,135,135,135,135	;U
.byte	177,177,167,177,135,153,135,135,135,135	;V
.byte	177,177,135,177,125,111,135,125,135,135	;W
.byte	177,177,135,177,153,135,153,167,135,135	;X
.byte	177,177,167,177,167,167,153,167,135,135	;Y
.byte	177,177,101,177,173,175,157,167,101,137	;Z
.byte	177,177,101,177,171,171,171,171,101,171	;[
.byte	177,177,177,177,157,137,173,167,177,175	;\
.byte	177,177,101,177,117,117,117,117,101,117	;]
.byte	177,177,177,177,135,177,167,153,177,177	;^
.byte	177,177,101,177,177,177,177,177,177,177	;_
.byte	177,177,177,177,101,177,175,161,177,177	;`
.byte	177,177,123,177,135,115,123,115,177,177	;a
.byte	177,177,145,177,135,131,145,131,175,175	;b
.byte	177,177,103,177,175,175,103,175,177,177	;c
.byte	177,177,123,177,135,115,123,115,137,137	;d
.byte	177,177,143,177,101,175,143,135,177,177	;e
.byte	177,177,167,177,167,167,167,143,157,167	;f
.byte	143,177,123,137,135,115,123,115,177,177	;g
.byte	177,177,135,177,135,135,141,135,175,175	;h
.byte	177,177,143,177,167,167,177,163,177,167	;i
.byte	163,177,157,157,157,157,177,157,177,157	;j
.byte	177,177,135,177,161,155,155,165,175,135	;k
.byte	177,177,143,177,167,167,167,167,163,167	;l
.byte	177,177,125,177,125,125,151,125,177,177	;m
.byte	177,177,135,177,135,135,141,135,177,177	;n
.byte	177,177,143,177,135,135,143,135,177,177	;o
.byte	175,177,145,175,135,131,145,131,177,177	;p
.byte	137,177,123,137,135,115,123,115,177,177	;q
.byte	177,177,175,177,175,175,105,171,177,177	;r
.byte	177,177,141,177,143,137,103,175,177,177	;s
.byte	177,177,157,177,167,167,143,167,167,167	;t
.byte	177,177,103,177,135,135,135,135,177,177	;u
.byte	177,177,167,177,153,153,135,135,177,177	;v
.byte	177,177,153,177,135,125,135,135,177,177	;w
.byte	177,177,135,177,167,153,135,153,177,177	;x
.byte	143,177,143,137,135,135,135,135,177,177	;y
.byte	177,177,101,177,167,173,101,157,177,177	;z
.byte	177,177,157,177,167,167,167,173,157,167	;{
.byte	177,177,167,177,167,167,167,177,167,167	;|
.byte	177,177,173,177,167,167,167,157,173,167	;}
.byte	177,177,177,177,175,177,137,143,177,177	;~
.byte	177,177,101,177,101,101,101,101,101,101	;DEL
